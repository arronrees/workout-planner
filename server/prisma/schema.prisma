// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @unique @default(uuid())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  name                    String        @db.VarChar(255)
  email                   String        @unique @db.VarChar(255)
  password                String
  emailVerified           Boolean       @default(false)
  emailVerificationString String?
  passwordResetString     String?
  image                   String?
  Exercise                Exercise[]
  UserSettings            UserSettings?
  Workout                 Workout[]
}

enum WEIGHT_UNIT {
  kg
  lbs
}

model UserSettings {
  id         String      @id @unique @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  weightUnit WEIGHT_UNIT
  User       User        @relation(fields: [userId], references: [id])
  userId     String      @unique
}

enum MUSCLE_GROUP {
  Chest
  Shoulder
  Back
  Bicep
  Tricep
  Quad
  Hamstring
  Calf
  Glute
  Abs
  Core
}

enum EQUIPMENT {
  Full
  Basic
  None
}

model Exercise {
  id                  String                @id @unique @default(uuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  userId              String
  User                User                  @relation(fields: [userId], references: [id])
  name                String                @db.VarChar(255)
  muscleGroup         MUSCLE_GROUP
  equipment           EQUIPMENT
  notes               String?
  ExerciseProgression ExerciseProgression[]
  Workout             Workout?              @relation(fields: [workoutId], references: [id])
  workoutId           String?
}

model ExerciseProgression {
  id         String   @id @unique @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exerciseId String
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  weight     Int
  reps       Int
  sets       Int
}

model Workout {
  id          String       @id @unique @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  User        User         @relation(fields: [userId], references: [id])
  name        String       @db.VarChar(255)
  notes       String?
  muscleGroup MUSCLE_GROUP
  equipment   EQUIPMENT
  Exercises   Exercise[]
}
